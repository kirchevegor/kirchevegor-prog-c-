name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Запуск при создании тегов
    branches:
      - main  # Запуск на каждый коммит в main
  workflow_dispatch:  # Ручной запуск

jobs:
  build-and-release:
    name: Build and Create Release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # Только Linux и macOS

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up build tools (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: Set up build tools (macOS)
      if: runner.os == 'macOS'
      run: brew install gcc

    - name: Build project
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          g++ -o main main.cpp
        elif [ "${{ runner.os }}" == "macOS" ]; then
          clang++ -o main main.cpp
        fi

    - name: Archive build
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          tar -czvf main-linux.tar.gz main
        elif [ "${{ runner.os }}" == "macOS" ]; then
          tar -czvf main-macos.tar.gz main
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ runner.os }}  # Используем имя артефакта с операционной системой
        path: |
          main-linux.tar.gz
          main-macos.tar.gz

  release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest

    steps:
    - name: Download build artifact for Linux
      if: matrix.os == 'ubuntu-latest'
      uses: actions/download-artifact@v3
      with:
        name: build-ubuntu-latest  # Загружаем артефакт для Linux

    - name: Download build artifact for macOS
      if: matrix.os == 'macos-latest'
      uses: actions/download-artifact@v3
      with:
        name: build-macos-latest  # Загружаем артефакт для macOS

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Используем стандартный токен GitHub
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          Автоматически созданный релиз для версии ${{ github.ref_name }}.
        draft: false
        prerelease: false

    - name: Upload Linux artifact to release
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./main-linux.tar.gz
        asset_name: main-linux.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS artifact to release
      if: matrix.os == 'macos-latest'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./main-macos.tar.gz
        asset_name: main-macos.tar.gz
        asset_content_type: application/gzip
